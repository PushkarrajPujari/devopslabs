╔════════════════════════════════════════════════════════════════════╗
║                 🐳 DOCKER COMMANDS EXPLAINED IN ASCII             ║
║                A Beginner-Friendly Docker Cheatsheet              ║
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 🚀 BASIC DOCKER TERMINOLOGY                                       ║
╠════════════════════════════════════════════════════════════════════╣
║ 🧱 IMAGE    → Read-only template to create containers (like OS)    ║
║ 📦 CONTAINER → Running instance of an image                        ║
║ 📚 VOLUME   → Persistent data storage that lives outside container ║
║ 🌐 NETWORK  → Communication layer between containers               ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 🔧 docker run FLAGS AND OPTIONS                                   ║
╠════════════════════════════════════════════════════════════════════╣
║ ▶ docker run [OPTIONS] IMAGE [COMMAND]                            ║
╚════════════════════════════════════════════════════════════════════╝

🧩 COMMONLY USED FLAGS:

╔════════════════════════════════════════════════════════════════════╗
║ -d                                                                 ║
╠════════════════════════════════════════════════════════════════════╣
║ Detached mode: Runs the container in the background.               ║
║ You won’t see logs unless you check with: `docker logs`           ║
║                                                                   ║
║ ➤ Example:                                                        ║
║   docker run -d nginx                                             ║
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ -p <hostPort>:<containerPort>                                     ║
╠════════════════════════════════════════════════════════════════════╣
║ Port mapping: Links a port on your host to a port inside the       ║
║ container. Required to access web services inside containers.      ║
║                                                                   ║
║ ➤ Example:                                                        ║
║   docker run -p 8080:80 nginx                                     ║
║   # Access Nginx on localhost:8080                                ║
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ -v <volumeName>:<containerPath>                                   ║
╠════════════════════════════════════════════════════════════════════╣
║ Volume mount: Attaches persistent storage to container.            ║
║ Useful for storing data that survives container deletion.          ║
║                                                                   ║
║ ➤ Example:                                                        ║
║   docker run -v mydata:/data busybox                              ║
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ -it                                                               ║
╠════════════════════════════════════════════════════════════════════╣
║ Interactive + TTY: Opens a shell inside the container so you can  ║
║ run commands like you do in a terminal.                           ║
║                                                                   ║
║ ➤ Example:                                                        ║
║   docker run -it ubuntu bash                                      ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 📦 docker build                                                   ║
╠════════════════════════════════════════════════════════════════════╣
║ Builds an image from a Dockerfile                                 ║
║                                                                   ║
║ ➤ Syntax:                                                         ║
║   docker build -t <name> .                                        ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 📜 docker ps                                                      ║
╠════════════════════════════════════════════════════════════════════╣
║ Lists running containers                                          ║
║                                                                   ║
║ ➤ Add `-a` to see all containers (stopped + running):             ║
║   docker ps -a                                                    ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 🛑 docker stop <container>                                        ║
╠════════════════════════════════════════════════════════════════════╣
║ Stops a running container gracefully                              ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 🗑 docker rm <container>                                           ║
╠════════════════════════════════════════════════════════════════════╣
║ Removes a stopped container                                       ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 🧽 docker system prune -f                                         ║
╠════════════════════════════════════════════════════════════════════╣
║ Cleans up unused containers, images, volumes, and networks         ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 📝 BONUS TIP: NAMING CONTAINERS                                   ║
╠════════════════════════════════════════════════════════════════════╣
║ Use `--name` to assign a readable name instead of random ID        ║
║                                                                   ║
║ ➤ Example:                                                        ║
║   docker run --name myweb -d -p 8080:80 nginx                     ║
╚════════════════════════════════════════════════════════════════════╝


╔════════════════════════════════════════════════════════════════════╗
║ 🧠 REMEMBER                                                       ║
╠════════════════════════════════════════════════════════════════════╣
║ - Images = Blueprints (read-only)                                 ║
║ - Containers = Live instances                                     ║
║ - Volumes = Persistent storage                                    ║
║ - Networks = Container communication layer                        ║
╚════════════════════════════════════════════════════════════════════╝

🎉 YOU NOW KNOW:
✔ What detached mode is
✔ What port mapping does
✔ How to attach volumes
✔ How to run, build, and manage containers

🧾 PRACTICE TIP:
Type `docker --help` or `docker run --help` for all options!
