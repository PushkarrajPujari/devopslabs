╔════════════════════════════════════════════════════════════════════╗
║             🐳 DOCKER PRACTICAL LAB – STEP-BY-STEP                ║
║      Basic Commands | Web Server | Volumes | Dockerfile Build     ║
╚════════════════════════════════════════════════════════════════════╝

📘 Instructions:
Follow each step, read the explanation, and type the commands to learn 
how Docker works from scratch. Let's begin!

╔════════════════════════════════════════════════════════════════════╗
║ 1️⃣  RUN HELLO-WORLD CONTAINER                                    ║
╠════════════════════════════════════════════════════════════════════╣
❓ Command to verify Docker is working?
▶️ docker run hello-world

💬 Explanation:
Downloads and runs a test container that prints a success message.
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 2️⃣  LIST CONTAINERS                                              ║
╠════════════════════════════════════════════════════════════════════╣
❓ How to list running containers?
▶️ docker ps

❓ How to list all (stopped + running) containers?
▶️ docker ps -a

💬 Explanation:
`ps` shows live containers; `ps -a` shows history of all.
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 3️⃣  LIST DOWNLOADED IMAGES                                       ║
╠════════════════════════════════════════════════════════════════════╣
❓ How to see all locally available Docker images?
▶️ docker images

💬 Explanation:
Shows all pulled or built images on your system.
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 4️⃣  RUN NGINX IN DETACHED MODE                                   ║
╠════════════════════════════════════════════════════════════════════╣
❓ How to run Nginx web server in background (port 8080)?
▶️ docker run -d -p 8080:80 nginx

💡 Flags:
  -d      → Detached (background mode)
  -p 8080:80 → Maps localhost:8080 → container:80

🧪 Visit: http://localhost:8080
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 5️⃣  USE A VOLUME WITH BUSYBOX                                    ║
╠════════════════════════════════════════════════════════════════════╣
❓ Create a volume named `mydata`:
▶️ docker volume create mydata

❓ Run BusyBox container with volume attached:
▶️ docker run -it -v mydata:/data busybox

📝 Inside Container:
▶️ echo "Persistent" > /data/file.txt

💬 Explanation:
Data saved in `/data` inside container persists across restarts.
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 6️⃣  CREATE A DOCKERFILE FOR A STATIC WEBSITE                     ║
╠════════════════════════════════════════════════════════════════════╣
📁 Directory Structure:
myapp/
├── Dockerfile
└── site/
    └── index.html

📄 Dockerfile Content:
────────────────────────────────────────────────────────────
FROM nginx:alpine
COPY ./site /usr/share/nginx/html
────────────────────────────────────────────────────────────

💬 Explanation:
This creates a new image that serves your custom HTML via Nginx.
╚════════════════════════════════════════════════════════════════════╝

╔════════════════════════════════════════════════════════════════════╗
║ 7️⃣  BUILD AND RUN YOUR WEB APP IMAGE                             ║
╠════════════════════════════════════════════════════════════════════╣
❓ Build Docker image with name `mywebapp`:
▶️ docker build -t mywebapp .

❓ Run the container on port 8081:
▶️ docker run -d -p 8081:80 mywebapp

🧪 Visit in browser: http://localhost:8081

💬 Explanation:
You’ve built a Docker image with your own website inside it!
╚════════════════════════════════════════════════════════════════════╝

🎉 CONGRATULATIONS!
You've practiced basic Docker skills:
✔ Running containers
✔ Using volumes
✔ Building images
✔ Serving web apps

🧹 BONUS CLEAN-UP COMMANDS:
────────────────────────────────────────────────────────────
docker stop <container_id>
docker rm <container_id>
docker rmi <image_id>
docker volume rm mydata
docker system prune -f
────────────────────────────────────────────────────────────
